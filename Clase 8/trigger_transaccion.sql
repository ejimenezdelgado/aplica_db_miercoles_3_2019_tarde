CREATE OR REPLACE FUNCTION F_TRANSACCION () RETURNS TRIGGER 
AS
$$

DECLARE
   NOMBRE_TABLA VARCHAR(20);
BEGIN
   NOMBRE_TABLA:= TG_TABLE_NAME;

   RAISE NOTICE 'TRIGGER LLAMADO EN %ANTES DE UN %', TG_TABLE_NAME, TG_OP;

   IF (TG_OP ='INSERT') THEN
      INSERT INTO BITACORA (TIEMPO,DESCRIPCION)
      VALUES (NOW(),'NUEVO CLIENTE AGREGADO TABLA: NOMBRE_TABLA');
      RETURN NEW;
   END IF;

   IF (TG_OP = 'UPDATE') THEN
      IF (NEW. MONTO < 0)THEN
          RAISE NOTICE 'MONTO INVALIDO. NO SE ACEPTAN NEGATIVOS';
      END IF;
      IF (NEW.MONTO != OLD.MONTO)THEN
          INSERT INTO BITACORA (TIEMPO,DESCRIPCION)
          VALUES (NOW(),'MONTO DE LA CUENTA ACTUALIZAD0 TABLA:' || NOMBRE_TABLA || 'CLIENTE:' || OLD.NOMBRE_CLIENTE ||
          'MONTO ANTERIOR: '||OLD.MONTO || 'MONTO NUEVO: '|| NEW.MONTO ': NUEVO: ' || NEW.MONTO);
          RETURN NEW;
      END IF;
   END IF;

   IF (TG_OP ='DELETE') THEN
      INSERT INTO BITACORA (TIEMPO,DESCRIPCION)
      VALUES (NOW(),'CLIENTE ELIMINADO TABLA:' || 'NOMBRE_TABLA'||OLD.NOMBRE_CLIENTE);
      RETURN OLD;
   END IF;
END
$$
LANGUAGE 'plpgsql'

CREATE TRIGGER TR_CUENTA_CORRIENTE 
BEFORE INSERT OR UPDATE OR DELETE 
ON CUENTA_CORRIENTE
FOR EACH ROW
EXECUTE PROCEDURE F_TRANSACCION();

CREATE TRIGGER TR_CUENTA_AHORROS
BEFORE INSERT OR UPDATE OR DELETE 
ON CUENTA_AHORROS
FOR EACH ROW
EXECUTE PROCEDURE F_TRANSACCION();


